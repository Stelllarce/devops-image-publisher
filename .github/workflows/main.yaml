name: Main Branch  CI/CD Pipeline

on:
  pull_request:
    branches:
      main
  workflow_dispatch:
env:
  DOCKER_IMAGE_TAG: ${{ github.ref == 'refs/heads/master' && 'prod-' || 'dev-' }}${{ github.sha }}
  GITHUB_REGISTRY: ghcr.io
  GITHUB_REPOSITORY: ${{ github.repository }}

jobs:
  lint:
    permissions: write-all
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.10.16'
          architecture: x64
      - name: Install flake8
        run: pip install flake8
      - name: Run flake8
        uses: suo/flake8-github-action@releases/v1
        with:
          checkName: 'flake8'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  tests:
    name: Unit and Integration Tests
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10.15'
          architecture: x64
      - name: Install Dependencies
        run: pip install -r requirements.txt
      - name: Run Tests
        run: pytest tests/
      - name: Install Coverage
        run: pip install coverage 
      - name: Generate Coverage Report
        run: |
          coverage run -m pytest tests/
          coverage xml
      - name: Upload Test Coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage.xml
          path: coverage.xml

  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    needs: [tests]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  docker-build:
    permissions:
      id-token: write
      contents: read
      packages: write
    runs-on: ubuntu-latest
    needs: [sonarqube]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.GITHUB_REGISTRY }}
          username: stelllarce
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{ env.GITHUB_REGISTRY }}/stelllarce/devops-image-publisher:dev-${{ github.sha }}

  scan-docker-image:
    permissions:
      id-token: write
      contents: read
      packages: read
    runs-on: ubuntu-latest
    needs: [docker-build]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.GITHUB_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Scan Docker image
        uses: snyk/actions/docker@master
        continue-on-error: true
        with:
          image: ${{ env.GITHUB_REGISTRY }}/${{ env.GITHUB_REPOSITORY }}:${{ env.DOCKER_IMAGE_TAG }}
          args: --file=Dockerfile --severity-threshold=high --sarif-file-output=snyk.sarif
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      - name: Upload Snyk report as sarif
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

  # eks-deploy:
  #   name: Deploy to EKS
  #   needs: [scan-docker-image]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Configure AWS CLI
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-east-1
  #     - name: Install kubectl
  #       uses: azure/setup-kubectl@v3
  #       with:
  #         version: latest
  #     - name: Configure kubectl Context
  #       run: |
  #         aws eks update-kubeconfig --name <eks-cluster-name>
  #     - name: Deploy to EKS
  #       run: |
  #         kubectl apply -f k8s/deployment.yaml
  #         kubectl apply -f k8s/service.yaml

  # monitoring:
  #   name: Setup Monitoring
  #   needs: [eks-deploy]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Install Prometheus & Grafana
  #       run: |
  #         kubectl apply -f monitoring/prometheus.yaml
  #         kubectl apply -f monitoring/grafana.yaml
  #     - name: Verify Monitoring
  #       run: kubectl get pods --namespace=monitoring